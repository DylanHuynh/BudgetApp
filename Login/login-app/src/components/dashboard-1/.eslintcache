[{"/Users/saisarankidambi/Plextech/BudgetApp/dashboard/src/App.js":"1","/Users/saisarankidambi/Plextech/BudgetApp/dashboard/src/reportWebVitals.js":"2","/Users/saisarankidambi/Plextech/BudgetApp/dashboard/src/store.js":"3","/Users/saisarankidambi/Plextech/BudgetApp/dashboard/src/Calendar.js":"4","/Users/saisarankidambi/Plextech/BudgetApp/dashboard/src/Chart.js":"5","/Users/saisarankidambi/Plextech/BudgetApp/dashboard/src/index.js":"6","/Users/saisarankidambi/Plextech/BudgetApp/dashboard/src/ProgressBar.js":"7"},{"size":5425,"mtime":1609436371098,"results":"8","hashOfConfig":"9"},{"size":362,"mtime":1609435804469,"results":"10","hashOfConfig":"9"},{"size":963,"mtime":1609435804469,"results":"11","hashOfConfig":"9"},{"size":2231,"mtime":1609435804467,"results":"12","hashOfConfig":"9"},{"size":1890,"mtime":1609435804467,"results":"13","hashOfConfig":"9"},{"size":500,"mtime":1609435804468,"results":"14","hashOfConfig":"9"},{"size":698,"mtime":1609435804467,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"19"},"91srmp",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"/Users/saisarankidambi/Plextech/BudgetApp/dashboard/src/App.js",["35","36","37","38","39","40"],"import logo from './logo.svg';\nimport './App.css';\nimport React, { useState, Component } from 'react';\nimport { DayPilot, DayPilotCalendar } from \"daypilot-pro-react\";\nimport ProgressBar from './ProgressBar.js';\nimport Calendar from './Calendar.js';\nimport LineChart from './Chart.js';\nimport { user1 } from './store.js';\nimport { startOfWeek, format, addDays, getTime } from 'date-fns'\n\n\n//going to previous and next = add/subtract 7 days\n//add currentFirstDay which use to determine what to render in that week\n//only class should be purchase, day should be converted into a Date object\n//checkboxes for each repetition day so attribute is an array not a string\n//getDay returns 0-6 corresponding to M-S\n//isEqual() compares date objects\n\n\n// let formattedFirstDay = format(firstDay,' EEEEEE M/d');\n// console.log(formattedFirstDay);\nconst findPurchaseTotal = (account, startOfWeek) => {\n  let sum = 0;\n  console.log(account);\n  for (const purchase of account.purchases) {\n    if (purchase.repetition.length > 0) {\n      sum += purchase.repetition.length * purchase.price;\n    }\n    else if (getTime(purchase.day) >= getTime(startOfWeek) && getTime(purchase.day) < getTime(addDays(startOfWeek, 7)))\n      sum += purchase.price;\n\n  }\n  return sum;\n}\n\nconst findPriceDistribution = (account,startOfWeek) => {\n  let prices = {}\n\n    for (const purchase of account.purchases) {\n      if (purchase.category in prices && (getTime(purchase.day) >= getTime(startOfWeek) && getTime(purchase.day) < getTime(addDays(startOfWeek, 7)))) {\n        prices[purchase.category] += purchase.price;\n      }\n      else {\n        prices[purchase.category] = purchase.price;\n      }\n\n    }\n\n  return prices;\n}\n\nconst generateDailyCosts = (account,startOfWeek) => {\n  let cumulativeCost = 0;\n  let budget = account.weeklyBudget;\n  let days = ['Su','Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];\n  let dailyCosts = [budget, budget, budget, budget, budget, budget, budget];\n  console.log(startOfWeek);\n  for (let i = 0; i < 7; i++) {\n    for (const purchase of account.purchases) {\n      if (purchase.repetition.includes(days[i])) {\n        cumulativeCost += purchase.price;\n      }\n      else if (format(purchase.day,'EEEEEE') === days[i] && (getTime(purchase.day) >= getTime(startOfWeek) && getTime(purchase.day) < getTime(addDays(startOfWeek, 7)))) {\n        cumulativeCost += purchase.price;\n      }\n\n    }\n    dailyCosts[i] -= cumulativeCost;\n  }\n  return dailyCosts\n}\n\nconst statusMessage = (account, budget, categoryPrices,startOfWeek) => {\n  if (findPurchaseTotal(account,startOfWeek) <= budget) {\n    return \"On Track!\"\n  }\n  else {\n    let maxCategory = \"\";\n    let maxPrice = 0;\n    for (const key in categoryPrices) {\n      console.log(key);\n      if (categoryPrices[key] > maxPrice) {\n        maxCategory = key;\n        maxPrice = categoryPrices[key]\n      }\n    }\n    if (maxCategory === \"\") {\n      return \"No purchases made yet\"\n    }\n    return \"Projected to exceed budget. Consider reducing spending in: \" + maxCategory;\n  }\n}\n\nconst parseRepetitions = (repetition, purchase) => {\n  let dates = [];\n  if (repetition === \"no\") {\n    return repetition;\n  }\n  let startIndex = 0;\n  for (let i = 0; i < repetition.length; i++) {\n    if (repetition.substring(i, i + 1) === \"/\") {\n      dates.push(repetition.substring(startIndex, i));\n      startIndex = i + 1;\n    }\n  }\n  dates.push(repetition.substring(repetition.length - 1, repetition.length));\n  return dates;\n}\n\nconst processRepetitions = (account) => {\n  for (const purchase in account.purchases) {\n    if (purchase.reptitions.length > 0) {\n\n    }\n  }\n}\n\nfunction App() {\n  // let convertedWeek = processRepetitions(thisWeek);\n  const [firstDay, setDate] = useState(startOfWeek(new Date()));\n  const alterDate = (count) => {\n    setDate(addDays(firstDay, count));\n    console.log(addDays(firstDay, count))\n  }\n  const vals =  findPriceDistribution(user1,firstDay);\n\n  return (\n\n    <div className=\"App\">\n\n      <button onClick={() => alterDate(-7)}>Previous</button>\n      My Dashboard\n      <button onClick={() => alterDate(7)}>Next</button>\n      <Calendar startDate={firstDay} />\n      {/* TODO: grid layout from MDN guide for columns */}\n      {format(firstDay, ' M/d')}\n      <form >\n        <label>\n          Alter Weekly Budget:\n          <input type=\"text\" />\n        </label>\n        <input type=\"submit\" value=\"Enter\" />\n      </form>\n      <div class=\"wrapper\">\n        <div class=\"status-report\">\n          <h2>Status Report:</h2>\n          <h3>You have Spent ${findPurchaseTotal(user1,firstDay)} Dollars</h3>\n\n          <ProgressBar percentage={findPurchaseTotal(user1,firstDay) / user1.weeklyBudget * 100} />\n          <h4>You are projected to spend {findPurchaseTotal(user1,firstDay) / user1.weeklyBudget * 100}% of your weekly budget</h4>\n          <h5>Status: {statusMessage(user1, user1.weeklyBudget,vals,firstDay)}</h5>\n          <div>\n            {\n              Object.keys(vals).map((key, index) => (\n                <p key={index}> The {key} category has a cumulative total of ${vals[key]}</p>\n              ))\n            }\n          </div>\n        </div>\n        <div class=\"visualizations\">\n          Visualizations\n          <LineChart dailyCosts={generateDailyCosts(user1,firstDay)} />\n\n        </div>\n\n      </div>\n      <button>\n        Add a purchase!\n      </button>\n\n      <button>\n        Sign Out\n      </button>\n    </div>\n\n\n  );\n}\n\nexport default App;\n",["41","42"],"/Users/saisarankidambi/Plextech/BudgetApp/dashboard/src/reportWebVitals.js",[],["43","44"],"/Users/saisarankidambi/Plextech/BudgetApp/dashboard/src/store.js",["45","46","47","48","49"],"import React from 'react';\nimport { startOfWeek,format,addDays,isEqual } from 'date-fns'\n\nclass Week {\n  constructor(dates) {\n    this.dates = dates;\n  }\n}\n\nclass Day {\n  constructor(day, purchases) {\n    this.day = day;\n    this.purchases = purchases;\n  }\n}\nclass Account {\n  constructor(purchases,budget) {\n    this.purchases = purchases;\n    this.weeklyBudget = budget;\n  }\n}\n\nclass Purchase {\n  constructor(name, price, category, day, repetition) {\n    this.name = name;\n    this.price = price;\n    this.category = category;\n    this.day = day;\n    this.repetition = repetition;\n  }\n}\n\n//defining user1\nlet wed1 = new Purchase(\"Grapes\", 3, \"Food\", addDays(startOfWeek(new Date()),3), []);\nlet fri1 = new Purchase(\"Pizza\", 7.5, \"Food\", addDays(startOfWeek(new Date()),5), ['Mo','We','Fr']);\nlet wed2 = new Purchase(\"Calculator\", 20, \"School\", addDays(startOfWeek(new Date()),3), [\"Mo\",\"We\"]);\n\n\nlet user1 = new Account([wed1,fri1,wed2],100)\n\nexport { user1 };\n","/Users/saisarankidambi/Plextech/BudgetApp/dashboard/src/Calendar.js",["50"],"/Users/saisarankidambi/Plextech/BudgetApp/dashboard/src/Chart.js",[],"/Users/saisarankidambi/Plextech/BudgetApp/dashboard/src/index.js",[],["51","52"],"/Users/saisarankidambi/Plextech/BudgetApp/dashboard/src/ProgressBar.js",[],{"ruleId":"53","severity":1,"message":"54","line":1,"column":8,"nodeType":"55","messageId":"56","endLine":1,"endColumn":12},{"ruleId":"53","severity":1,"message":"57","line":3,"column":27,"nodeType":"55","messageId":"56","endLine":3,"endColumn":36},{"ruleId":"53","severity":1,"message":"58","line":4,"column":10,"nodeType":"55","messageId":"56","endLine":4,"endColumn":18},{"ruleId":"53","severity":1,"message":"59","line":4,"column":20,"nodeType":"55","messageId":"56","endLine":4,"endColumn":36},{"ruleId":"53","severity":1,"message":"60","line":94,"column":7,"nodeType":"55","messageId":"56","endLine":94,"endColumn":23},{"ruleId":"53","severity":1,"message":"61","line":110,"column":7,"nodeType":"55","messageId":"56","endLine":110,"endColumn":25},{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"62","replacedBy":"66"},{"ruleId":"64","replacedBy":"67"},{"ruleId":"53","severity":1,"message":"68","line":1,"column":8,"nodeType":"55","messageId":"56","endLine":1,"endColumn":13},{"ruleId":"53","severity":1,"message":"69","line":2,"column":22,"nodeType":"55","messageId":"56","endLine":2,"endColumn":28},{"ruleId":"53","severity":1,"message":"70","line":2,"column":37,"nodeType":"55","messageId":"56","endLine":2,"endColumn":44},{"ruleId":"53","severity":1,"message":"71","line":4,"column":7,"nodeType":"55","messageId":"56","endLine":4,"endColumn":11},{"ruleId":"53","severity":1,"message":"72","line":10,"column":7,"nodeType":"55","messageId":"56","endLine":10,"endColumn":10},{"ruleId":"53","severity":1,"message":"73","line":4,"column":10,"nodeType":"55","messageId":"56","endLine":4,"endColumn":21},{"ruleId":"62","replacedBy":"74"},{"ruleId":"64","replacedBy":"75"},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","'DayPilot' is defined but never used.","'DayPilotCalendar' is defined but never used.","'parseRepetitions' is assigned a value but never used.","'processRepetitions' is assigned a value but never used.","no-native-reassign",["76"],"no-negated-in-lhs",["77"],["76"],["77"],"'React' is defined but never used.","'format' is defined but never used.","'isEqual' is defined but never used.","'Week' is defined but never used.","'Day' is defined but never used.","'startOfWeek' is defined but never used.",["76"],["77"],"no-global-assign","no-unsafe-negation"]